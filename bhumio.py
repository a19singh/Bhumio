# -*- coding: utf-8 -*-
"""Bhumio.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10krfmI196PYbrzdVfk4wslgg3ZrL-OVT
"""

import pandas as pd
import numpy as np
import re
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.model_selection import StratifiedKFold
from sklearn.ensemble import RandomForestClassifier
from sklearn import metrics
from imblearn.combine import SMOTETomek
from collections import Counter

# from google.colab import files
# files.upload()

dataset = pd.read_excel('MortgageDataset1.xlsx')

print(dataset.columns)

data = dataset[['loan_amount', 'loan_to_value_ratio','income', 'debt_to_income_ratio','action_taken']]

print(data.head())

print(data.isnull().sum())

data.dropna(inplace=True)

print(data.action_taken.value_counts())

data['debt_to_income_ratio1'] = data['debt_to_income_ratio'].replace(to_replace ="[^0-9a-zA-Z' ]+", value = ' ', regex = True)

data[['dti1','dti2']]=(data['debt_to_income_ratio1'].str.split(' ',1,expand=True))

data['dti1'] = np.where(data['dti1'] == data['dti1'][12], data['dti2'], data['dti1'])

data['dtif'] = (data['dti1'].astype('float64') + data['dti2'].astype('float64'))/2

data['dtif'].fillna(data.debt_to_income_ratio, inplace=True)

data.drop(labels=['debt_to_income_ratio','debt_to_income_ratio1','dti1','dti2'], axis=1, inplace=True)

X = data[['loan_amount', 'loan_to_value_ratio','income','dtif']]
Y = data['action_taken']

print(X.dtypes)

from imblearn.over_sampling import RandomOverSampler
os = RandomOverSampler(sampling_strategy=1)
x_res, y_res = os.fit_resample(X,Y)

Counter(y_res)

x_train_os, x_test_os, y_train_os, y_test_os = train_test_split(x_res, y_res, test_size=0.3, random_state=2)
# sc = StandardScaler()
# x_scaled = sc.fit_transform(x_train_os)
rfc = RandomForestClassifier(n_estimators=100, criterion='entropy', max_depth=6, min_samples_split=3, random_state=3)

rfc.fit(x_train_os,y_train_os)
train_predict = rfc.predict(x_train_os)
test_predict = rfc.predict(x_test_os)
print('Training Accuracy: ',metrics.accuracy_score(y_train_os,train_predict))
print('Testing Accuracy: ',metrics.accuracy_score(y_test_os,test_predict))

a = [[[75000,96.5,49.0,41.0]],[[125000,96.5,34.0,47.0]],[[165000,96.75,45.0,38.0]],[[185000,100.983,84.0,25.0]],[[185000,100.983,25.0,84.0]],[[75000,96.5,49.0,41.0]],[[85000,52.353,44.0,41.0]],[[455000,80.0,181.0,25.0]],[[2.9500e+05, 8.0000e+01, 6.3000e+01, 4.8000e+01]],[[125000,96.5,34,47]],[[225000,69.24,67,43]]] 
for i in a:
  print(i)
  print(rfc.predict(i))
  print()

import pickle

with open('Bhumio.pkl','wb') as file:
  pickle.dump(rfc, file)

